#!/bin/bash
workspace=~/beebot_ws

# source ${workspace}/src/scripts/params.bash

MY_PATH=$(readlink -f  $(dirname $0))
WORKING_DIR='--working-directory'
ROSCORE_TERMINAL='--geometry=50x10+0+0'
SENSING_WIZARD='--geometry=50x10+400+0'
LOC_WIZARD='--geometry=50x10+500+0'
RVIZ_WIZARD='--geometry=50x10+600+0'
PERCEPTION_WIZARD='--geometry=50x10+800+0'
MP_WIZARD='--geometry=50x10+850+0'
MC_WIZARD='--geometry=50x10+900+0'

OPTION_COMMAND='--command'

MASTER_DISPLAY_OPTION="${ROSCORE_TERMINAL} ${OPTION_TITLE}\=\"roscore\""
SENSING_DISPLAY_OPTION="${SENSING_WIZARD} ${OPTION_TITLE}\=\"sensing\""
LOC_DISPLAY_OPTION="${LOC_WIZARD} ${OPTION_TITLE}\=\"localization\""
RVIZ_DISPLAY_OPTION="${RVIZ_WIZARD} ${OPTION_TITLE}\=\"rviz\""
PERCEPTION_DISPLAY_OPTION="${PERCEPTION_WIZARD} ${OPTION_TITLE}\=\"perception\""
MP_DISPLAY_OPTION="${MP_WIZARD} ${OPTION_TITLE}\=\"motion planning\""
MC_DISPLAY_OPTION="${MC_WIZARD} ${OPTION_TITLE}\=\"motion controller\""
WEB_DISPLAY_OPTION="${MC_WIZARD} ${OPTION_TITLE}\=\"web controller\""

if [ $(which gnome-terminal) ]; then
    TERMINAL=gnome-terminal
    GNOME_VERSION=$(gnome-terminal --version | cut -d '.' -f 2)
    if [ ${GNOME_VERSION} -ge 14 ]; then
        MASTER_DISPLAY_OPTION=''
        SENSING_DISPLAY_OPTION=''
        LOC_DISPLAY_OPTION=''
        RVIZ_DISPLAY_OPTION=''
        PERCEPTION_DISPLAY_OPTION=''
        MP_DISPLAY_OPTION=''
        MC_DISPLAY_OPTION=''
    fi
fi

echo ">>>>>>>>>>>>>> Begins"

${TERMINAL} ${MASTER_DISPLAY_OPTION} ${WORKING_DIR}=${MY_PATH} ${OPTION_COMMAND}="bash -c 'roscore; ; exec bash -i'"&
${TERMINAL} ${SENSING_DISPLAY_OPTION} ${OPTION_COMMAND}="bash -c 'source ${workspace}/devel/setup.bash; roslaunch ydlidar_ros_driver TG15.launch; exec bash -i'"
sleep 2
${TERMINAL} ${SENSING_DISPLAY_OPTION} ${OPTION_COMMAND}="bash -c 'source ${workspace}/devel/setup.bash; roslaunch raycast_mapping_ros raycast_mapping.launch; exec bash -i'"
sleep 2
${TERMINAL} ${RVIZ_DISPLAY_OPTION} ${OPTION_COMMAND}="bash -c 'source ${workspace}/devel/setup.bash; roslaunch system_ros rviz.launch; exec bash -i'"
# sleep 1
# ${TERMINAL} ${LOC_DISPLAY_OPTION} ${OPTION_COMMAND}="bash -c 'source ${workspace}/src/scripts/params.bash; roslaunch stpc_launch fake_localization.launch; exec bash -i'"
# ${TERMINAL} ${PERCEPTION_DISPLAY_OPTION} ${OPTION_COMMAND}="bash -c 'source ${workspace}/src/scripts/params.bash; roslaunch loc_tf_fake traffic_light_fake.launch; exec bash -i'"
# ${TERMINAL} ${MP_DISPLAY_OPTION} ${OPTION_COMMAND}="bash -c 'source ${workspace}/src/scripts/params.bash; roslaunch map_loader pointcloud_map_loader.launch; exec bash -i'"
# ${TERMINAL} ${RVIZ_DISPLAY_OPTION} ${OPTION_COMMAND}="bash -c 'source ${workspace}/devel/setup.bash; roslaunch main rviz.launch; exec bash -i'"

# sleep 2
# ${TERMINAL} ${MP_DISPLAY_OPTION} ${OPTION_COMMAND}="bash -c 'python3 ${workspace}/src/motion_planning/mp/motion_planner/modules/button_signal/src/run_button_traffic.py; exec bash -i'"
# ${TERMINAL} ${MP_DISPLAY_OPTION} ${OPTION_COMMAND}="bash -c 'source ~/.bashrc; roslaunch segwayrmp401_controller robotcontroller.launch; exec bash -i'"
# ${TERMINAL} ${MP_DISPLAY_OPTION} ${OPTION_COMMAND}="bash -c 'source ${workspace}/devel/setup.bash; roslaunch main main_planner.launch; exec bash -i'"

